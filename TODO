Iteration 1:
  *Valid programs consist only of literal integers and return values.*
  ✔ Allow typecheck error messages to be passed through. @done(20-05-26 20:37)
  ✔ Write some initial tests for basic C files. @done(20-05-26 21:57)
  ✔ Read the LLVM language tutorial. @done(20-05-27 20:30)
  ✔ Implemented LLVM codegen for basic C files. @done(20-05-27 20:30)
  ☐ Figure out why the tests directory is causing a linker error with LLVM.
  ✔ Allow bitcode to be output to a file. @done(20-05-27 20:47)

Iteration 2:
  *Add variable bindings and the ability to initialize and return integers.*
  ✔ Add local variable bindings to AST. @done(20-05-31 13:26)
  ✔ Add the typing of local variable bindings to the typechecker. @done(20-05-31 13:26)
  ✔ Add code generation for local variable bindings. @done(20-05-31 13:26)
  ✔ Add global variable bindings to AST. @done(20-05-31 14:42)
  ✔ Add typing of global variables to the typechecker @done(20-05-31 14:42)
  ✔ Add code generation for global variables. @done(20-05-31 14:43)

Iteration 3:
  *Add assignment (the ability to assign variables to other values).*
  ✔ Add assignment statement type to AST. @done(20-06-05 10:42)
  ✔ Add typechecking assignment statements. @done(20-06-05 10:52)
  ✔ Add code generation for assignment statements. @done(20-06-05 10:52)

Iteration 4:
  *This is a cleanup iteration for creating a testing pipeline.*
  ✔ Add ppx_expect tests for parser @done(20-06-05 11:42)
  ✔ Add ppx_expect tests for typechecker @done(20-06-05 11:48)
  ☐ Add ppx_expect tests for code generator
    This one is a little bit difficult because I am using global variables
    right now. I will come back to it later.
  ☐ Remove noisy code generation from lvalues
    Right now, each lvalue that is generated generates a load even if the
    value of that load is not going to be used. This can be cleaned up by
    LLVM with DCE but I might want to consider cleaning it up myself.

Iteration 5:
  *Adding addition, subtraction, multiplication, and division for integers*
  ✔ Add binary operations to Parser (figure out associativity). @done(20-06-06 16:20)
  ✔ Add binary operations to AST. @done(20-06-06 16:20)
  ✔ Add binary opertations to the typechecker. @done(20-06-06 16:20)
  ✔ Add code generation for binary operations. @done(20-06-06 16:20)

Iteration 6:
  *Adding booleans, equal, not equal, less than, greater than.*
  ✔ Add booleans to parser. @done(20-06-08 19:12)
  ✔ Add booleans to AST. @done(20-06-08 19:12)
  ✔ Add binary operations on booleans. @done(20-06-08 19:12)

Iteration 7:
  *Add if statements.*
  ✔ Add if statements to parser and AST. @done(20-06-08 22:26)
  ✔ Add if statements to typechecker. @done(20-06-08 22:26)
  ✔ Add if statements to code generator. @done(20-06-08 22:27)
  ✔ Add the optional else block to if statements. @done(20-06-11 22:21)
  ✔ Add support for block statements. @done(20-06-11 22:21)
  ✔ Fix bug that causes opposite branching in condition logic. @done(20-06-09 18:11)

Iteration 8:
  *Add function calls and function declarations.*
  ✔ Add function call expression to parser and AST. @done(20-06-15 16:51)
  ✔ Add noarg call expression to typechecker. @done(20-06-15 16:51)
  ✔ Add noarg call expression to code generator. @done(20-06-15 16:52)
  ☐ Allow call expressions with arguments in the typechecker.
  ☐ Allow call expressions with arguments in the code generator.
